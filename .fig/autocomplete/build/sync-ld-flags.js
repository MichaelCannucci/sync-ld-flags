var c="https://app.launchdarkly.com",y="405BFF",F="3DD6F5",k="A34FDE",g="fig://template?badge=\u{1F511}",l=`fig://template?color=${F}&badge=E`,d=`fig://template?color=${k}&badge=\u2691`,m=`fig://template?color=${y}&badge=P`,u="fig://template?badge=\u{1F3F7}",f="fig://template?badge=\u{1F310}",s=(e,t)=>{let n=E(e,t);return n>-1?e[n+1]:""},E=(e,t)=>{for(let n of t.name){let o=e.indexOf(n);if(o>-1)return o}return-1},i={projects:{script:e=>{let t=s(e,r);return`curl -s -X GET       ${s(e,a)||c}/api/v2/projects       -H 'Authorization: ${t}'`},postProcess:e=>JSON.parse(e).items.map(n=>({name:n.key,insertValue:n.key,description:n.name,icon:m}))},environments:{script:e=>{let t=s(e,r),n=s(e,p);return`curl -s -X GET       ${s(e,a)||c}/api/v2/projects/${n}       -H 'Authorization: ${t}'`},postProcess:e=>JSON.parse(e).environments.map(n=>({name:n.key,insertValue:n.key,description:n.name,icon:`fig://template?color=${n.color}&badge=E`}))},flags:{script:e=>{let t=s(e,r),n=s(e,p),o=s(e,O)||s(e,b),h=s(e,a)||c,v=o?`env=${o}`:"";return`curl -s -X GET       ${h}/api/v2/flags/${n}?${v}       -H 'Authorization: ${t}'`},postProcess:e=>JSON.parse(e).items.map(n=>({name:n.key,insertValue:n.key,description:`${n.name} - ${n.description}`,icon:d}))},flagTags:{script:e=>{let t=s(e,r);return`curl -s -X GET       ${s(e,a)||c}/api/v2/tags?kind=flag       -H 'Authorization: ${t}'`},postProcess:e=>JSON.parse(e).items.map(n=>({name:n,icon:u}))}},p={name:["-p","--project-key"],description:"Project key",isRepeatable:!1,icon:m,priority:800,args:{name:"string",description:"Project key",debounce:!0,generators:i.listProjects}},r={name:["-t","--api-token"],description:"LaunchDarkly personal access token with write-level access.",isRepeatable:!1,icon:g,priority:1e3,args:{name:"string",description:"API access token",generators:{script:"jq -r '.[] .apitoken//empty' ~/.config/ldc.json",postProcess:e=>e.split(`
`).map(t=>({name:t,icon:g}))}}},a={name:["-H","--host"],description:"Hostname override",isRepeatable:!1,icon:f,args:{name:"URI",description:"LaunchDarkly URI",generators:{script:"jq -r '.[] .server//empty' ~/.config/ldc.json",postProcess:e=>e.split(`
`).map(t=>({name:t,icon:f}))}}},O={name:["-s","--source-env"],description:"Source environment",dependsOn:["-p"],isRepeatable:!1,icon:l,priority:700,args:{name:"string",description:"Environment key",debounce:!0,generators:i.listEnvironments}},b={name:["-d","--destination-env"],description:"Destination environment",dependsOn:["-p"],isRepeatable:!1,icon:l,priority:700,args:{name:"string",description:"Environment key",debounce:!0,generators:i.listEnvironments}},j={name:"sync-ld-flags",description:"Copy flag settings from one environment to another.",options:[{name:["-h","--help"],description:"Show help for sync-ld-flags"},p,O,b,r,{name:["-o","--omit-segments"],description:"Omit segments when syncing",isRepeatable:!1},{name:["-f","--flag"],description:"Sync only the specified flag",isRepeatable:!1,icon:d,exclusiveOn:["-T","--tag"],args:{name:"string",description:"Flag key",debounce:!0,generators:i.listFlags}},{name:["-T","--tag"],description:"Sync flags with the specified tag(s). Only flags with all tags will sync.",icon:u,exclusiveOn:["-f","--flag"],args:{name:"string",description:"Tag name",isVariadic:!0,optionsCanBreakVariadicArg:!0,debounce:!0,generators:i.listFlagTags}},{name:["--dry-run"],description:"Preview changes",isRepeatable:!1},a,{name:["-v","--verbose"],description:"Enable verbose logging",isRepeatable:!1},{name:["-D","--debug"],description:"Enable HTTP debugging",isRepeatable:!1}]},P=j;export{P as default};
//# sourceMappingURL=data:application/json;base64,
