var a="https://app.launchdarkly.com",s=(e,t)=>{let n=l(e,t);return n>-1?e[n+1]:""},l=(e,t)=>{for(let n of t.name){let o=e.indexOf(n);if(o>-1)return o}return-1},O={script(e){let t=s(e,r);return`curl -s -X GET     ${s(e,i)||a}/api/v2/projects     -H 'Authorization: ${t}'`},postProcess(e){return JSON.parse(e).items.map(n=>({name:n.key,insertValue:n.key,description:n.name}))}},p={script(e){let t=s(e,r),n=s(e,c);return`curl -s -X GET     ${s(e,i)||a}/api/v2/projects/${n}     -H 'Authorization: ${t}'`},postProcess(e){return JSON.parse(e).environments.map(n=>({name:n.key,insertValue:n.key,description:n.name}))}},h={script(e){let t=s(e,r),n=s(e,c),o=s(e,g)||s(e,d),u=s(e,i)||a,m=o?`env=${o}`:"";return`curl -s -X GET     ${u}/api/v2/flags/${n}?${m}     -H 'Authorization: ${t}'`},postProcess(e){return JSON.parse(e).items.map(n=>({name:n.key,insertValue:n.key,description:`${n.name} - ${n.description}`}))}},c={name:["--project-key","-p"],description:"Project key",args:{name:"project-key",debounce:!0,generators:O}},r={name:["--api-token","-t"],description:"API token",args:{name:"api-token"}},i={name:["--host","-H"],description:"Hostname override",args:{name:"host"}},g={name:["--source-env","-s"],description:"Source environment",dependsOn:["-p"],args:{name:"source-env",debounce:!0,generators:p}},d={name:["--destination-env","-d"],description:"Destination environment",dependsOn:["-p"],args:{name:"source-env",debounce:!0,generators:p}},v={name:"sync-ld-flags",description:"LaunchDarkly Environment Synchronizer",options:[{name:["--help","-h"],description:"Show help for sync-ld-flags"},c,g,d,r,{name:["--omit-segments","-o"],description:"Omit segments when syncing"},{name:["--flag","-f"],description:"Only sync the given flag",dependsOn:["-p"],args:{name:"flag",debounce:!0,generators:h}},{name:["--tag","-T"],description:"Only sync flags with the given tag(s)",args:{name:"tag"}},{name:["--dry-run"],description:"Preview syncing changes"},i,{name:["--debug","-D"],description:"Enables HTTP debugging"}]},y=v;export{y as default};
//# sourceMappingURL=data:application/json;base64,
