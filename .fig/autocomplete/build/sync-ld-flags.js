var r=(e,t)=>{let n=p(e,t);return n>-1?e[n+1]:""},p=(e,t)=>{for(let n of t.name){let o=e.indexOf(n);if(o>-1)return o}return-1},a={script(e){return`curl -s -X GET     https://app.ld.catamorphic.com/api/v2/projects     -H 'Authorization: ${r(e,s)}'`},postProcess(e){return JSON.parse(e).items.map(n=>({name:n.key,insertValue:n.key,description:n.name}))}},i={script(e){let t=r(e,s);return`curl -s -X GET     https://app.ld.catamorphic.com/api/v2/projects/${r(e,c)}     -H 'Authorization: ${t}'`},postProcess(e){return JSON.parse(e).environments.map(n=>({name:n.key,insertValue:n.key,description:n.name}))}},c={name:["--project-key","-p"],description:"Project key",args:{name:"project-key",debounce:!0,generators:a}},s={name:["--api-token","-t"],description:"API token",args:{name:"api-token"}},m={name:"sync-ld-flags",description:"LaunchDarkly Environment Synchronizer",options:[{name:["--help","-h"],description:"Show help for sync-ld-flags"},c,{name:["--source-env","-s"],description:"Source environment",dependsOn:["-p"],args:{name:"source-env",debounce:!0,generators:i}},{name:["--destination-env","-d"],description:"Destination environment",dependsOn:["-p"],args:{name:"source-env",debounce:!0,generators:i}},s,{name:["--omit-segments","-o"],description:"Omit segments when syncing"},{name:["--host","-H"],description:"Hostname override"},{name:["--debug","-D"],description:"Enables HTTP debugging"}]},g=m;export{g as default};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL3N5bmMtbGQtZmxhZ3MudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbInR5cGUgUHJvamVjdCA9IHtcbiAgbmFtZTogc3RyaW5nLFxuICBrZXk6IHN0cmluZ1xufVxuXG50eXBlIEVudmlyb25tZW50ID0ge1xuICBuYW1lOiBzdHJpbmcsXG4gIGtleTogc3RyaW5nXG59XG5cbmNvbnN0IGdldE9wdGlvbkZyb21Db250ZXh0ID0gKGNvbnRleHQsIG9wdGlvbjogRmlnLk9wdGlvbikgPT4ge1xuICBjb25zdCBpbmRleCA9IGdldE9wdGlvbkluZGV4RnJvbUNvbnRleHQoY29udGV4dCwgb3B0aW9uKTtcbiAgY29uc3QgdmFsdWUgPSBpbmRleCA+IC0xID8gY29udGV4dFtpbmRleCsxXSA6ICcnO1xuXG4gIHJldHVybiB2YWx1ZTtcbn1cblxuY29uc3QgZ2V0T3B0aW9uSW5kZXhGcm9tQ29udGV4dCA9IChjb250ZXh0LCBvcHRpb246IEZpZy5PcHRpb24pID0+IHtcbiAgZm9yIChjb25zdCBuYW1lIG9mIG9wdGlvbi5uYW1lKSB7XG4gICAgY29uc3QgaWR4ID0gY29udGV4dC5pbmRleE9mKG5hbWUpO1xuICAgIGlmIChpZHggPiAtMSkge1xuICAgICAgcmV0dXJuIGlkeDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLTE7XG59XG5cbmNvbnN0IHByb2plY3RHZW5lcmF0b3I6IEZpZy5HZW5lcmF0b3IgPSB7XG4gIHNjcmlwdChjb250ZXh0KSB7XG4gICAgY29uc3QgdG9rZW4gPSBnZXRPcHRpb25Gcm9tQ29udGV4dChjb250ZXh0LCB0b2tlbk9wdCk7XG5cbiAgICAvLyB0byBkbyBjaGFuZ2UgdXJsIGJhc2VcbiAgICByZXR1cm4gYGN1cmwgLXMgLVggR0VUIFxcXG4gICAgaHR0cHM6Ly9hcHAubGQuY2F0YW1vcnBoaWMuY29tL2FwaS92Mi9wcm9qZWN0cyBcXFxuICAgIC1IICdBdXRob3JpemF0aW9uOiAke3Rva2VufSdgO1xuICB9LFxuICBwb3N0UHJvY2VzcyhvdXQpIHtcbiAgICBjb25zdCBwcm9qZWN0czogUHJvamVjdFtdID0gSlNPTi5wYXJzZShvdXQpLml0ZW1zO1xuXG4gICAgcmV0dXJuIHByb2plY3RzLm1hcDxGaWcuU3VnZ2VzdGlvbj4oKGl0ZW0pID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6IGl0ZW0ua2V5LFxuICAgICAgICBpbnNlcnRWYWx1ZTogaXRlbS5rZXksXG4gICAgICAgIGRlc2NyaXB0aW9uOiBpdGVtLm5hbWUsXG4gICAgICB9O1xuICAgIH0pO1xuICB9LFxufTtcblxuY29uc3QgZW52aXJvbm1lbnRHZW5lcmF0b3I6IEZpZy5HZW5lcmF0b3IgPSB7XG4gIHNjcmlwdChjb250ZXh0KSB7XG4gICAgY29uc3QgdG9rZW4gPSBnZXRPcHRpb25Gcm9tQ29udGV4dChjb250ZXh0LCB0b2tlbk9wdCk7XG4gICAgY29uc3QgcHJvamVjdCA9IGdldE9wdGlvbkZyb21Db250ZXh0KGNvbnRleHQsIHByb2plY3RPcHQpO1xuICAgIFxuICAgIC8vIHRvIGRvIGNoYW5nZSB1cmwgYmFzZVxuICAgIHJldHVybiBgY3VybCAtcyAtWCBHRVQgXFxcbiAgICBodHRwczovL2FwcC5sZC5jYXRhbW9ycGhpYy5jb20vYXBpL3YyL3Byb2plY3RzLyR7cHJvamVjdH0gXFxcbiAgICAtSCAnQXV0aG9yaXphdGlvbjogJHt0b2tlbn0nYDtcbiAgfSxcbiAgcG9zdFByb2Nlc3Mob3V0KSB7XG4gICAgY29uc3QgZW52czogRW52aXJvbm1lbnRbXSA9IEpTT04ucGFyc2Uob3V0KS5lbnZpcm9ubWVudHM7XG5cbiAgICByZXR1cm4gZW52cy5tYXA8RmlnLlN1Z2dlc3Rpb24+KChpdGVtKSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiBpdGVtLmtleSxcbiAgICAgICAgaW5zZXJ0VmFsdWU6IGl0ZW0ua2V5LFxuICAgICAgICBkZXNjcmlwdGlvbjogaXRlbS5uYW1lLFxuICAgICAgfTtcbiAgICB9KTtcbiAgfSxcbn07XG5cbmNvbnN0IHByb2plY3RPcHQ6IEZpZy5PcHRpb24gPSB7XG4gIG5hbWU6IFtcIi0tcHJvamVjdC1rZXlcIiwgXCItcFwiXSxcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlByb2plY3Qga2V5XCIsXG4gICAgICBhcmdzOiB7XG4gICAgICAgIG5hbWU6IFwicHJvamVjdC1rZXlcIixcbiAgICAgICAgZGVib3VuY2U6IHRydWUsXG4gICAgICAgIGdlbmVyYXRvcnM6IHByb2plY3RHZW5lcmF0b3IsXG4gICAgICB9XG59O1xuXG5jb25zdCB0b2tlbk9wdDogRmlnLk9wdGlvbiA9IHtcbiAgbmFtZTogW1wiLS1hcGktdG9rZW5cIiwgXCItdFwiXSxcbiAgZGVzY3JpcHRpb246IFwiQVBJIHRva2VuXCIsXG4gIGFyZ3M6IHtcbiAgICBuYW1lOiBcImFwaS10b2tlblwiXG4gIH1cbn07XG5cbmNvbnN0IGNvbXBsZXRpb25TcGVjOiBGaWcuU3BlYyA9IHtcbiAgbmFtZTogXCJzeW5jLWxkLWZsYWdzXCIsXG4gIGRlc2NyaXB0aW9uOiBcIkxhdW5jaERhcmtseSBFbnZpcm9ubWVudCBTeW5jaHJvbml6ZXJcIixcbiAgLy8gc3ViY29tbWFuZHM6IFtcbiAgLy8gICB7XG4gIC8vICAgICBuYW1lOiBcIm15X3N1YmNvbW1hbmRcIixcbiAgLy8gICAgIGRlc2NyaXB0aW9uOiBcIkV4YW1wbGUgc3ViY29tbWFuZFwiLFxuICAvLyAgICAgc3ViY29tbWFuZHM6IFt7XG4gIC8vICAgICAgIG5hbWU6IFwibXlfbmVzdGVkX3N1YmNvbW1hbmRcIixcbiAgLy8gICAgICAgZGVzY3JpcHRpb246IFwiTmVzdGVkIHN1YmNvbW1hbmQsIGV4YW1wbGUgdXNhZ2U6ICdzeW5jLWxkLWZsYWdzIG15X3N1YmNvbW1hbmQgbXlfbmVzdGVkX3N1YmNvbW1hbmQnXCJcbiAgLy8gICAgIH1dLFxuICAvLyAgIH0sXG4gIC8vIF0sXG4gIG9wdGlvbnM6IFtcbiAgICB7XG4gICAgICBuYW1lOiBbXCItLWhlbHBcIiwgXCItaFwiXSxcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlNob3cgaGVscCBmb3Igc3luYy1sZC1mbGFnc1wiLFxuICAgIH0sXG4gICAgcHJvamVjdE9wdCxcbiAgICB7XG4gICAgICBuYW1lOiBbXCItLXNvdXJjZS1lbnZcIiwgXCItc1wiXSxcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlNvdXJjZSBlbnZpcm9ubWVudFwiLFxuICAgICAgZGVwZW5kc09uOiBbXCItcFwiXSxcbiAgICAgIGFyZ3M6IHtcbiAgICAgICAgbmFtZTogXCJzb3VyY2UtZW52XCIsXG4gICAgICAgIGRlYm91bmNlOiB0cnVlLFxuICAgICAgICBnZW5lcmF0b3JzOiBlbnZpcm9ubWVudEdlbmVyYXRvcixcbiAgICAgIH0sXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiBbXCItLWRlc3RpbmF0aW9uLWVudlwiLCBcIi1kXCJdLFxuICAgICAgZGVzY3JpcHRpb246IFwiRGVzdGluYXRpb24gZW52aXJvbm1lbnRcIixcbiAgICAgIGRlcGVuZHNPbjogW1wiLXBcIl0sXG4gICAgICBhcmdzOiB7XG4gICAgICAgIG5hbWU6IFwic291cmNlLWVudlwiLFxuICAgICAgICBkZWJvdW5jZTogdHJ1ZSxcbiAgICAgICAgZ2VuZXJhdG9yczogZW52aXJvbm1lbnRHZW5lcmF0b3IsXG4gICAgICB9LFxuICAgIH0sXG4gICAgdG9rZW5PcHQsXG4gICAge1xuICAgICAgbmFtZTogW1wiLS1vbWl0LXNlZ21lbnRzXCIsIFwiLW9cIl0sXG4gICAgICBkZXNjcmlwdGlvbjogXCJPbWl0IHNlZ21lbnRzIHdoZW4gc3luY2luZ1wiLFxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogW1wiLS1ob3N0XCIsIFwiLUhcIl0sXG4gICAgICBkZXNjcmlwdGlvbjogXCJIb3N0bmFtZSBvdmVycmlkZVwiLFxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogW1wiLS1kZWJ1Z1wiLCBcIi1EXCJdLFxuICAgICAgZGVzY3JpcHRpb246IFwiRW5hYmxlcyBIVFRQIGRlYnVnZ2luZ1wiLFxuICAgIH0sXG4gIF0sXG4gIC8vIE9ubHkgdW5jb21tZW50IGlmIHN5bmMtbGQtZmxhZ3MgdGFrZXMgYW4gYXJndW1lbnRcbiAgLy8gYXJnczoge31cbn07XG5leHBvcnQgZGVmYXVsdCBjb21wbGV0aW9uU3BlYzsiXSwKICAibWFwcGluZ3MiOiAiQUFVQSxHQUFNLEdBQXVCLENBQUMsRUFBUyxJQUF1QixDQUM1RCxHQUFNLEdBQVEsRUFBMEIsRUFBUyxHQUdqRCxNQUZjLEdBQVEsR0FBSyxFQUFRLEVBQU0sR0FBSyxJQUsxQyxFQUE0QixDQUFDLEVBQVMsSUFBdUIsQ0FDakUsT0FBVyxLQUFRLEdBQU8sS0FBTSxDQUM5QixHQUFNLEdBQU0sRUFBUSxRQUFRLEdBQzVCLEdBQUksRUFBTSxHQUNSLE1BQU8sR0FJWCxNQUFPLElBR0gsRUFBa0MsQ0FDdEMsT0FBTyxFQUFTLENBSWQsTUFBTyw0RkFITyxFQUFxQixFQUFTLE9BTzlDLFlBQVksRUFBSyxDQUdmLE1BQU8sQUFGcUIsTUFBSyxNQUFNLEdBQUssTUFFNUIsSUFBb0IsQUFBQyxHQUM1QixFQUNMLEtBQU0sRUFBSyxJQUNYLFlBQWEsRUFBSyxJQUNsQixZQUFhLEVBQUssVUFNcEIsRUFBc0MsQ0FDMUMsT0FBTyxFQUFTLENBQ2QsR0FBTSxHQUFRLEVBQXFCLEVBQVMsR0FJNUMsTUFBTyxxRUFIUyxFQUFxQixFQUFTLDZCQUt6QixNQUV2QixZQUFZLEVBQUssQ0FHZixNQUFPLEFBRnFCLE1BQUssTUFBTSxHQUFLLGFBRWhDLElBQW9CLEFBQUMsR0FDeEIsRUFDTCxLQUFNLEVBQUssSUFDWCxZQUFhLEVBQUssSUFDbEIsWUFBYSxFQUFLLFVBTXBCLEVBQXlCLENBQzdCLEtBQU0sQ0FBQyxnQkFBaUIsTUFDcEIsWUFBYSxjQUNiLEtBQU0sQ0FDSixLQUFNLGNBQ04sU0FBVSxHQUNWLFdBQVksSUFJZCxFQUF1QixDQUMzQixLQUFNLENBQUMsY0FBZSxNQUN0QixZQUFhLFlBQ2IsS0FBTSxDQUNKLEtBQU0sY0FJSixFQUEyQixDQUMvQixLQUFNLGdCQUNOLFlBQWEsd0NBV2IsUUFBUyxDQUNQLENBQ0UsS0FBTSxDQUFDLFNBQVUsTUFDakIsWUFBYSwrQkFFZixFQUNBLENBQ0UsS0FBTSxDQUFDLGVBQWdCLE1BQ3ZCLFlBQWEscUJBQ2IsVUFBVyxDQUFDLE1BQ1osS0FBTSxDQUNKLEtBQU0sYUFDTixTQUFVLEdBQ1YsV0FBWSxJQUdoQixDQUNFLEtBQU0sQ0FBQyxvQkFBcUIsTUFDNUIsWUFBYSwwQkFDYixVQUFXLENBQUMsTUFDWixLQUFNLENBQ0osS0FBTSxhQUNOLFNBQVUsR0FDVixXQUFZLElBR2hCLEVBQ0EsQ0FDRSxLQUFNLENBQUMsa0JBQW1CLE1BQzFCLFlBQWEsOEJBRWYsQ0FDRSxLQUFNLENBQUMsU0FBVSxNQUNqQixZQUFhLHFCQUVmLENBQ0UsS0FBTSxDQUFDLFVBQVcsTUFDbEIsWUFBYSw0QkFNWixFQUFRIiwKICAibmFtZXMiOiBbXQp9Cg==
